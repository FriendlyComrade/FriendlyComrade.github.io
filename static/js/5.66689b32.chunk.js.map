{"version":3,"sources":["components/MovieInfo/MovieInfo.module.scss","pages/Movie/Movie.module.scss","assets/images/full-heart.png","assets/images/heart.png","components/MovieInfo/MovieInfo.tsx","components/MovieInfo/index.js","pages/Movie/Movie.tsx","pages/Movie/Movie.js"],"names":["module","exports","MovieInfo","movie","trailer","image","navigator","useNavigate","dispatch","useDispatch","theme","useContext","ThemeContext","id","title","releaseDate","voteAverage","backdropPath","posterPath","credits","overview","videos","favoritesList","useSelector","state","Object","values","favoritesSlice","entities","shallowEqual","currentUserID","userSlice","favIcon","find","item","fullHeartIcon","heartIcon","cast","crew","filterActors","filter","obj","known_for_department","sliceActors","slice","map","actor","name","actors","join","findDirectors","job","director","directors","country","countries","trailerVideo","results","key","className","scss","trailerBlock","src","allowFullScreen","TMDB_IMAGE_PATH","movieInfoImg","alt","noImageText","infoConteiner","movieDescBlock","movieDescBlock__dark","style","backgroundImage","movieInfoImgWrapper","favoriteConteiner","onClick","removeFav","addFav","movieDescText","maska","overviewBlock","overviewBlock_dark","mobMovieDesc","movieDescActors","Movie","useParams","useGetMovieInfoQuery","film","data","isFetching","isSuccess","isError","movieInfoPage","wrapper","MainLoader","ErrorMessage"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,QAAU,2BAA2B,cAAgB,iCAAiC,OAAS,0BAA0B,eAAiB,kCAAkC,qBAAuB,wCAAwC,oBAAsB,uCAAuC,aAAe,gCAAgC,YAAc,+BAA+B,kBAAoB,qCAAqC,cAAgB,iCAAiC,MAAQ,yBAAyB,cAAgB,iCAAiC,mBAAqB,sCAAsC,aAAe,gCAAgC,gBAAkB,mCAAmC,aAAe,kC,mBCAhwBD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,cAAgB,6BAA6B,aAAe,4BAA4B,cAAgB,6BAA6B,MAAQ,uB,yHCDjL,MAA0B,uCCA1B,MAA0B,kC,OC4J1BC,IC3JAA,EDWf,SAAoBC,GAAqB,IAAD,IAuDhCC,EAeAC,EArEEC,EAAYC,cACZC,EAAWC,cAEVC,EAASC,qBAAWC,KAApBF,MAEHG,EAQUV,EARVU,GACAC,EAOUX,EAPVW,MACAC,EAMUZ,EANVY,YACAC,EAKUb,EALVa,YACAC,EAIUd,EAJVc,aACAC,EAGUf,EAHVe,WACAC,EAEUhB,EAFVgB,QACAC,EACUjB,EADViB,SACAC,EAAUlB,EAAVkB,OAEEC,EAAgBC,aAClB,SAACC,GAAD,OAAsBC,OAAOC,OAAOF,EAAMG,eAAeC,YACzDC,KAEEC,EAAgBP,aAClB,SAACC,GAAD,OAAsBA,EAAMO,UAAUlB,KACtCgB,KAGEG,EAAWV,EAAcW,MAAK,SAAAC,GAAI,OAAQ,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAM/B,SAAUU,KACxDsB,EACAC,EAeGC,EAAclB,EAAdkB,KAAMC,EAAQnB,EAARmB,KACPC,EAAY,OAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAMG,QAAO,SAAAC,GAAG,MAAiC,WAA7BA,EAAIC,wBACxCC,EAAW,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAcK,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,QAC5DC,EAAM,OAAIL,QAAJ,IAAIA,OAAJ,EAAIA,EAAaM,KAAK,MAE5BC,EAAa,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAME,QAAO,SAAAC,GAAG,MAAgB,aAAZA,EAAIU,OAC7CN,KAAI,SAAAO,GAAQ,OAAIA,EAASL,QACpBM,EAAS,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAeD,KAAK,MAEhCK,EAAO,OAAGnD,QAAH,IAAGA,GAAH,UAAGA,EAAOoD,iBAAV,aAAG,EAAkBV,KAAI,SAAAJ,GAAG,OAAIA,EAAIM,QAAME,KAAK,MAEtDO,EAAY,OAAGnC,QAAH,IAAGA,GAAH,UAAGA,EAAQoC,QAAQ,UAAnB,aAAG,EAAoBC,IAwCrC,OApCAtD,EADAoD,EAEI,wBACI1C,MAAOA,EACP6C,UAAWC,IAAKC,aAChBC,IAAG,wCAAmCN,GACtCO,iBAAe,IAKb,KAgBd1D,EAZKa,EAaD,qBACA4C,IAAG,UAAKE,KAAL,OAAuB9C,GAC1ByC,UAAWC,IAAKK,aAChBC,IAAG,UAAKpD,EAAL,UAdH,qCACI,qBACAgD,IAAK,kHACLH,UAAWC,IAAKK,aAChBC,IAAKpD,IAEL,4BAAY6C,UAAWC,IAAKO,YAA5B,yBAeA,sBAAKR,UAAWC,IAAKQ,cAArB,UACI,sBACAT,UAAqB,UAAVjD,EAAoBkD,IAAKS,eAAiBT,IAAKU,qBAC1DC,MAAOtD,EAAe,CAACuD,gBAAgB,OAAD,OAASR,KAAT,OAA2B/C,EAA3B,MAClC,CAACuD,gBAAgB,wKAHrB,UAKI,sBAAKb,UAAWC,IAAKa,oBAArB,UAMKpE,EACD,6BAAKS,IACL,qBAAK6C,UAAWC,IAAKc,kBAArB,SACI,qBAAKC,QAhFL,WACE,IAAlB7C,EAIIR,EAAcW,MAAK,SAAAC,GAAI,OAAQ,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAM/B,SAAUU,KAC3CL,EAASoE,YAAU/D,IAEnBL,EAASqE,YAAO,CAAChE,GAAIA,EAAIV,MAAOU,KANpCP,EAAU,YA8EqCwD,IAAK9B,EAASkC,IAAI,sBAIzD,sBAAKP,UAAWC,IAAKkB,cAArB,UACI,oCAAM,4BAAIhE,IAAV,OACA,gCACI,uCAAS,+BAAOC,IAAhB,OACA,wCAAU,+BAAOC,IAAjB,UAEJ,0CAAY,+BAAOsC,IAAnB,OACA,0CAAY,+BAAOD,IAAnB,OACA,yCAAW,+BAAOL,IAAlB,UAEJ,qBAAKW,UAAWC,IAAKmB,WAEzB,sBAAKpB,UAAqB,UAAVjD,EAAoBkD,IAAKoB,cAAgBpB,IAAKqB,mBAA9D,UACQ,mBAAGtB,UAAWC,IAAKsB,aAAnB,oBACA,sBAAMvB,UAAWC,IAAKsB,aAAtB,SAAqCnE,IACrC,mBAAG4C,UAAWC,IAAKsB,aAAnB,qBACA,sBAAMvB,UAAWC,IAAKsB,aAAtB,SAAqClE,IACrC,mBAAG2C,UAAWC,IAAKsB,aAAnB,uBACA,sBAAMvB,UAAWC,IAAKsB,aAAtB,SAAqC5B,IACrC,mBAAGK,UAAWC,IAAKsB,aAAnB,uBACA,sBAAMvB,UAAWC,IAAKsB,aAAtB,SAAqC7B,IACzC,mBAAGM,UAAWC,IAAKuB,gBAAnB,qBACA,sBAAMxB,UAAWC,IAAKuB,gBAAtB,SAAwCnC,IACxC,qCAAW,+BAAO5B,OAErBhB,M,iCExHFgF,EAnBD,WACV,IAAQ1E,EAAUC,qBAAWC,KAArBF,MACR,EAAiB2E,cAAVxE,UAAP,MAAY,EAAZ,EACA,EAAqDyE,aAAsBzE,GAA9D0E,EAAb,EAAOC,KAAYC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,UAAWC,EAA1C,EAA0CA,QAE1C,OACI,qBAAKhC,UAAWC,IAAKgC,cAArB,SACI,sBAAKjC,UAAWC,IAAKiC,QAArB,UACKJ,GACG,cAACK,EAAA,EAAD,CAAYpF,MAAOA,IAEtBgF,GAAa,cAAC,EAAD,eAAgBH,IAC7BI,GAAW,cAACI,EAAA,EAAD,UCtBbX","file":"static/js/5.66689b32.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MovieInfo_wrapper__3oRm5\",\"infoConteiner\":\"MovieInfo_infoConteiner__1nk4k\",\"appear\":\"MovieInfo_appear__3VMbG\",\"movieDescBlock\":\"MovieInfo_movieDescBlock__2gAAq\",\"movieDescBlock__dark\":\"MovieInfo_movieDescBlock__dark__2OAyA\",\"movieInfoImgWrapper\":\"MovieInfo_movieInfoImgWrapper__gwSk1\",\"movieInfoImg\":\"MovieInfo_movieInfoImg__JhkmZ\",\"noImageText\":\"MovieInfo_noImageText__2se3F\",\"favoriteConteiner\":\"MovieInfo_favoriteConteiner__3Haxz\",\"movieDescText\":\"MovieInfo_movieDescText__hhzQq\",\"maska\":\"MovieInfo_maska__uJSic\",\"overviewBlock\":\"MovieInfo_overviewBlock__2dzfH\",\"overviewBlock_dark\":\"MovieInfo_overviewBlock_dark__2jMo5\",\"mobMovieDesc\":\"MovieInfo_mobMovieDesc__n4dUU\",\"movieDescActors\":\"MovieInfo_movieDescActors__37aFn\",\"trailerBlock\":\"MovieInfo_trailerBlock__1Xgli\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Movie_wrapper__3v-gs\",\"movieInfoPage\":\"Movie_movieInfoPage__2VBqf\",\"loader__dark\":\"Movie_loader__dark__36ZtI\",\"loader__light\":\"Movie_loader__light__1kLLK\",\"load8\":\"Movie_load8__2N4vI\"};","export default __webpack_public_path__ + \"static/media/full-heart.56befac7.png\";","export default __webpack_public_path__ + \"static/media/heart.d581fa05.png\";","import scss from './MovieInfo.module.scss'\r\nimport { TMDB_IMAGE_PATH } from \"../../api/apiConfig\";\r\nimport { MovieInfoType } from \"../../types/MovieInfoType\";\r\nimport { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeProvider';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/store/store';\r\nimport { useNavigate } from 'react-router';\r\nimport { addFav, removeFav } from '../../redux/store/slices/favorites/favoritesSlice';\r\nimport fullHeartIcon from '../../assets/images/full-heart.png'\r\nimport heartIcon from '../../assets/images/heart.png'\r\n\r\nfunction MovieInfo (movie:MovieInfoType){\r\n    const navigator = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    const {theme} = useContext(ThemeContext)\r\n    const {\r\n        id, \r\n        title, \r\n        releaseDate, \r\n        voteAverage, \r\n        backdropPath, \r\n        posterPath, \r\n        credits, \r\n        overview, \r\n        videos} = movie;\r\n\r\n    const favoritesList = useSelector(\r\n        (state: RootState) => Object.values(state.favoritesSlice.entities),\r\n        shallowEqual\r\n    )\r\n    const currentUserID = useSelector(\r\n        (state: RootState) => state.userSlice.id,\r\n        shallowEqual\r\n    )\r\n\r\n    const favIcon = (favoritesList.find(item => item?.movie === id)) ?\r\n        fullHeartIcon :\r\n        heartIcon \r\n\r\n    const toggleFavorites = () => {\r\n        if (currentUserID === 0) {\r\n            navigator(\"/signin\");\r\n            return;\r\n        } else {\r\n            if (favoritesList.find(item => item?.movie === id)) {\r\n                dispatch(removeFav(id))\r\n            } else {\r\n                dispatch(addFav({id: id, movie: id}))\r\n            }\r\n        }\r\n    }\r\n\r\n    const {cast, crew} = credits;    \r\n    const filterActors =  cast?.filter(obj => obj.known_for_department === \"Acting\")\r\n    const sliceActors = filterActors?.slice(0, 12).map(actor => actor.name) \r\n    const actors =  sliceActors?.join(', ')\r\n\r\n    const findDirectors = crew?.filter(obj => obj.job === \"Director\")\r\n    .map(director => director.name)\r\n    const directors = findDirectors?.join(', ')\r\n    \r\n    const country = movie?.countries?.map(obj => obj.name).join(', ');\r\n\r\n    const trailerVideo = videos?.results[0]?.key\r\n\r\n    let trailer;\r\n    if (trailerVideo) {\r\n        trailer = (\r\n            <iframe\r\n                title={title}\r\n                className={scss.trailerBlock}\r\n                src={`https://www.youtube.com/embed/${trailerVideo}`}\r\n                allowFullScreen\r\n                >\r\n            </iframe>   \r\n        ) \r\n    } else {\r\n        trailer = null \r\n    }\r\n\r\n    let image;\r\n    if (!posterPath) {\r\n    image = (\r\n        <>\r\n            <img\r\n            src={'https://images.pexels.com/photos/1446948/pexels-photo-1446948.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260'}  \r\n            className={scss.movieInfoImg}\r\n            alt={title}\r\n            />\r\n            <figcaption className={scss.noImageText}>No image</figcaption>\r\n        </>\r\n    )\r\n    } else {\r\n    image = (\r\n        <img \r\n        src={`${TMDB_IMAGE_PATH}${posterPath}`} \r\n        className={scss.movieInfoImg}\r\n        alt={`${title}-img`}\r\n        />\r\n    )\r\n    }\r\n\r\n\r\n        return (\r\n            <div className={scss.infoConteiner}>\r\n                <div \r\n                className={theme === \"light\" ? scss.movieDescBlock : scss.movieDescBlock__dark}\r\n                style={backdropPath ? {backgroundImage: `url(${TMDB_IMAGE_PATH}${backdropPath})`} :\r\n                    {backgroundImage: `url(https://images.unsplash.com/photo-1514306191717-452ec28c7814?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1469&q=80})`}}\r\n                >\r\n                    <div className={scss.movieInfoImgWrapper}>                        \r\n                        {/* <img \r\n                        src={`${TMDB_IMAGE_PATH}${posterPath}`} \r\n                        className={scss.movieInfoImg}\r\n                        alt={`${title}-img`}\r\n                        /> */}\r\n                        {image}\r\n                        <h3>{title}</h3>\r\n                        <div className={scss.favoriteConteiner}>\r\n                            <img onClick={toggleFavorites} src={favIcon} alt=\"favorite-img\"/>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div className={scss.movieDescText}>\r\n                        <div> <p>{title}</p> </div>\r\n                        <div>\r\n                            <p>Year: <span>{releaseDate}</span> </p>\r\n                            <p>Rated: <span>{voteAverage}</span> </p>\r\n                        </div>\r\n                        <p>Country: <span>{country}</span> </p>\r\n                        <p>Director:<span>{directors}</span> </p>\r\n                        <p>Actors: <span>{actors}</span> </p>\r\n                    </div>\r\n                    <div className={scss.maska}></div>\r\n                </div>\r\n                <div className={theme === \"light\" ? scss.overviewBlock : scss.overviewBlock_dark}>\r\n                        <p className={scss.mobMovieDesc}>Year: </p> \r\n                        <span className={scss.mobMovieDesc}>{releaseDate}</span> \r\n                        <p className={scss.mobMovieDesc}>Rated: </p> \r\n                        <span className={scss.mobMovieDesc}>{voteAverage}</span> \r\n                        <p className={scss.mobMovieDesc}>Country: </p> \r\n                        <span className={scss.mobMovieDesc}>{country}</span> \r\n                        <p className={scss.mobMovieDesc}>Director:</p> \r\n                        <span className={scss.mobMovieDesc}>{directors}</span> \r\n                    <p className={scss.movieDescActors}>Actors:</p> \r\n                    <span className={scss.movieDescActors}>{actors}</span>\r\n                    <p>Plot</p><span>{overview}</span> \r\n                </div>\r\n                {trailer}\r\n            </div>\r\n\r\n        );\r\n};\r\n\r\nexport default MovieInfo;","import MovieInfo from \"./MovieInfo\";\r\nexport default MovieInfo;","import { useParams } from 'react-router';\r\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\r\nimport MovieInfo from '../../components/MovieInfo';\r\nimport { useGetMovieInfoQuery } from '../../redux/services/MovieService';\r\nimport { MovieInfoType } from '../../types/MovieInfoType';\r\nimport scss from './Movie.module.scss'\r\nimport { useContext } from 'react';\r\nimport { ThemeContext } from '../../context/ThemeProvider';\r\nimport MainLoader from '../../components/MainLoader/MainLoader';\r\n\r\n\r\nconst Movie = () => {\r\n    const { theme } = useContext(ThemeContext)\r\n    const {id = 0} = useParams();\r\n    const {data: film, isFetching, isSuccess, isError} = useGetMovieInfoQuery(+id)\r\n\r\n    return (\r\n        <div className={scss.movieInfoPage}>\r\n            <div className={scss.wrapper}>\r\n                {isFetching &&\r\n                    <MainLoader theme={theme}/>\r\n                }\r\n                {isSuccess && <MovieInfo {...(film as MovieInfoType)}/>}\r\n                {isError && <ErrorMessage/>}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Movie;","import Movie from './Movie.tsx';\r\nexport default Movie;"],"sourceRoot":""}