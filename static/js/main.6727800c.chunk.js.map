{"version":3,"sources":["redux/services/MovieService.ts","api/apiConfig.ts","api/apiUtils.ts","redux/utils/utils.ts","redux/store/middleware.tsx","redux/store/store.ts","context/ThemeProvider.tsx","redux/store/slices/favorites/favoritesSlice.ts","redux/store/slices/history/historySlice.ts","components/MainLoader/MainLoader.tsx","redux/store/slices/user/userSlice.ts","index.tsx"],"names":["moviesAPI","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","build","getPopularMovies","query","page","url","params","api_key","API_KEY","transformResponse","response","results","map","film","mapApiResponse","getMovieInfo","id","bigMapApiResponse","getFoundMovies","arg","title","useGetMovieInfoQuery","useGetPopularMoviesQuery","useGetFoundMoviesQuery","TMDB_IMAGE_PATH","poster_path","overview","release_date","original_title","backdrop_path","vote_average","posterPath","releaseDate","slice","originalTitle","backdropPath","voteAverage","production_countries","videos","credits","countries","getUserList","userListString","localStorage","getItem","JSON","parse","addFavLocalStore","currentUserID","movieId","newUserList","el","favorites","newUserListStringified","stringify","setItem","removeFavLocalStore","filter","movie","addHistoryLocalStore","searchValue","history","debounce","callback","delay","timerID","args","window","clearTimeout","setTimeout","apply","userActionList","addFavoritesToLocalStoreMiddleware","store","next","action","state","getState","includes","type","user","Object","values","userSlice","email","payload","persistConfig","key","storage","blacklist","rootReducer","combineReducers","historySlice","reducer","favoritesSlice","userReducer","persistedReducer","persistReducer","configureStore","middleware","getDefaultMiddleware","concat","persistedStore","persistStore","ThemeContext","React","createContext","ThemeProvider","children","useState","theme","setTheme","Provider","value","toggleTheme","favoritesAdapter","createEntityAdapter","createSlice","name","initialState","getInitialState","reducers","addFav","addOne","removeFav","removeOne","loadFavs","setAll","removeAllFavs","removeAll","actions","historyAdapter","addNewHistory","loadHistory","removeAllHistory","MainLoader","color","loading","css","size","resetUser","setUser","_state","App","lazy","ReactDOM","render","persistor","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.6727800c.chunk.js","sourcesContent":["import { ApiResponse } from './../../types/ApiResponse';\r\nimport {BigApiResponse} from '../../types/BigApiResponse'\r\nimport {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react'\r\nimport { Movie } from '../../types/Movie';\r\nimport {API_KEY} from '../../api/apiConfig'\r\nimport {mapApiResponse, bigMapApiResponse} from '../../api/apiUtils';\r\nimport { MovieInfoType } from '../../types/MovieInfoType';\r\n\r\ninterface GetFound {\r\n    page: number,\r\n    title: string\r\n}\r\n\r\nexport const moviesAPI = createApi({\r\n    reducerPath: 'moviesAPI',\r\n    baseQuery: fetchBaseQuery({\r\n        baseUrl: 'https://api.themoviedb.org/3'\r\n    }),\r\n    endpoints: (build) => ({\r\n        getPopularMovies: build.query<Movie[], number | void>({\r\n            query: (page = 1) => ({\r\n                url: `/movie/popular`, //500\r\n                params: {\r\n                    api_key: API_KEY,\r\n                    page: page\r\n                },\r\n            }),\r\n            transformResponse: (response: {results: ApiResponse[]}) => \r\n                response.results.map(film => mapApiResponse(film))\r\n        }),\r\n        getMovieInfo: build.query<MovieInfoType, number | string>({\r\n            query: (id: number | string) => ({\r\n                url: `/movie/${id}?api_key=${API_KEY}&append_to_response=videos,credits`\r\n            }),\r\n            transformResponse: (response: BigApiResponse) =>\r\n                bigMapApiResponse(response)\r\n        }),\r\n            getFoundMovies: build.query<Movie[], GetFound>({\r\n                query: (arg) => {\r\n                    const {page, title} = arg;\r\n                    return {\r\n                        url: '/search/movie',\r\n                        params: {\r\n                            api_key: API_KEY,\r\n                            query: title,\r\n                            page: page\r\n                        }\r\n                    }    \r\n            },\r\n            transformResponse: (response: {results: ApiResponse[]}) => \r\n                response.results.map(film => mapApiResponse(film))\r\n        })\r\n\r\n    })\r\n})\r\nexport const {useGetPopularMoviesQuery, useGetMovieInfoQuery, useGetFoundMoviesQuery } = moviesAPI;\r\n","export const API_KEY = `0dcd550c1ae54344d3263ec58df4a494`;\r\nexport const TMDB_IMAGE_PATH = 'https://image.tmdb.org/t/p/original';","import { Movie } from './../types/Movie';\r\nimport { ApiResponse } from './../types/ApiResponse';\r\nimport { BigApiResponse } from '../types/BigApiResponse';\r\nimport { MovieInfoType } from '../types/MovieInfoType';\r\n\r\nexport const mapApiResponse = ({\r\n    poster_path,\r\n    overview,\r\n    release_date,\r\n    id,\r\n    original_title,\r\n    title,\r\n    backdrop_path,\r\n    vote_average\r\n}: ApiResponse): Movie => ({\r\n    posterPath: poster_path,\r\n    overview: overview,\r\n    releaseDate: release_date ? release_date.slice(0, 4) : release_date,\r\n    id: id,\r\n    originalTitle: original_title,\r\n    title: title,\r\n    backdropPath: backdrop_path,\r\n    voteAverage: vote_average\r\n});\r\n\r\n\r\nexport const bigMapApiResponse = ({\r\n    poster_path,\r\n    overview,\r\n    release_date,\r\n    id,\r\n    original_title,\r\n    title,\r\n    backdrop_path,\r\n    vote_average,\r\n    production_countries,\r\n    videos,\r\n    credits\r\n}: BigApiResponse): MovieInfoType => ({\r\n    posterPath: poster_path,\r\n    overview: overview,\r\n    releaseDate: release_date ? release_date.slice(0, 4) : release_date,\r\n    id: id,\r\n    originalTitle: original_title,\r\n    title: title,\r\n    backdropPath: backdrop_path,\r\n    voteAverage: vote_average,\r\n    countries: production_countries,\r\n    videos: videos,\r\n    credits: credits\r\n});\r\n\r\n","import { User } from \"../../types/User\";\r\n\r\nconst getUserList = () => {\r\n  const userListString: string = localStorage.getItem(\"user\") || \"[]\";\r\n  return JSON.parse(userListString);\r\n};\r\n\r\nconst addFavLocalStore = (currentUserID: number, movieId: number) => {\r\n  const userList: User[] = getUserList();\r\n  const newUserList = userList.map((el) => {\r\n    if (el.id === currentUserID) {\r\n      if (!el.favorites) {\r\n        el.favorites = [movieId];\r\n      } else {\r\n        el.favorites = [...el.favorites, movieId];\r\n      }\r\n    }\r\n    return el;\r\n  });\r\n  const newUserListStringified = JSON.stringify(newUserList);\r\n  localStorage.setItem(\"user\", newUserListStringified);\r\n};\r\n\r\nconst removeFavLocalStore = (currentUserID: number, movieId: number) => {\r\n  const userList: User[] = getUserList();\r\n  const newUserList = userList.map((el) => {\r\n    if (el.id === currentUserID) {\r\n      if (!el.favorites) {\r\n        el.favorites = [];\r\n      } else {\r\n        el.favorites = [...el.favorites.filter((movie) => movie !== movieId)];\r\n      }\r\n    }\r\n    return el;\r\n  });\r\n  const newUserListStringified = JSON.stringify(newUserList);\r\n  localStorage.setItem(\"user\", newUserListStringified);\r\n};\r\n\r\nconst addHistoryLocalStore = (currentUserID: number, searchValue: string) => {\r\n  const userList: User[] = getUserList();\r\n  const newUserList = userList.map((el) => {\r\n    if (el.id === currentUserID) {\r\n      if (!el.history) {\r\n        el.history = [searchValue];\r\n      } else {\r\n        el.history = [...el.history, searchValue];\r\n      }\r\n    }\r\n    return el;\r\n  });\r\n\r\n  const newUserListStringified = JSON.stringify(newUserList);\r\n  localStorage.setItem(\"user\", newUserListStringified);\r\n};\r\n\r\nconst debounce = (callback: Function, delay: number) => {\r\n  let timerID: number;\r\n  return function (this: any, ...args: any[]) {\r\n    if (timerID) {\r\n      window.clearTimeout(timerID);\r\n    }\r\n    timerID = window.setTimeout(() => callback.apply(this, args), delay);\r\n  };\r\n};\r\n\r\nexport {debounce, addHistoryLocalStore, addFavLocalStore, removeFavLocalStore}","import { Middleware } from \"redux\";\r\nimport { addFavLocalStore, removeFavLocalStore } from \"../utils/utils\";\r\n\r\nconst userActionList = [\"favorites/addFav\", \"favorites/removeFav\"];\r\n\r\nconst addFavoritesToLocalStoreMiddleware: Middleware =\r\n  (store) => (next) => (action) => {\r\n    const state = store.getState();\r\n    if (userActionList.includes(action.type)) {\r\n      switch (action.type) {\r\n        case userActionList[0]: {\r\n          const getJsonUserFromLocalStore = JSON.parse(\r\n            localStorage.getItem(\"user\") || \"[]\"\r\n          );\r\n          const getMailList = getJsonUserFromLocalStore.map((user: any) => {\r\n            return Object.values(user);\r\n          });\r\n          if (getMailList[0].includes(state.userSlice.email)) {\r\n            addFavLocalStore(state.userSlice.id, action.payload.movie);\r\n          }\r\n          break;\r\n        }\r\n        case userActionList[1]: {\r\n          removeFavLocalStore(state.userSlice.id, action.payload);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    next(action);\r\n  };\r\n\r\nexport default addFavoritesToLocalStoreMiddleware;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport {moviesAPI} from '../services/MovieService'\r\nimport userReducer from './slices/user/userSlice'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport {persistReducer, persistStore} from 'redux-persist'\r\nimport { favoritesSlice } from './slices/favorites/favoritesSlice';\r\nimport { historySlice } from './slices/history/historySlice';\r\nimport addFavoritesToLocalStoreMiddleware from './middleware';\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [moviesAPI.reducerPath]\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  historySlice: historySlice.reducer,\r\n  favoritesSlice: favoritesSlice.reducer,\r\n  userSlice: userReducer, \r\n  [moviesAPI.reducerPath]: moviesAPI.reducer\r\n})\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport const store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware: (getDefaultMiddleware) => \r\n      getDefaultMiddleware().concat(\r\n        addFavoritesToLocalStoreMiddleware,\r\n        moviesAPI.middleware)\r\n  })\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppThunk<ReturnType = void> = ThunkAction< \r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>\r\n\r\nexport const persistedStore = persistStore(store)\r\nexport default store;","import React, { useState } from \"react\";\r\n\r\ntype Theme = \"light\" | \"dark\";\r\ntype ThemeContext = { theme: Theme; toggleTheme: () => void };\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const ThemeContext = React.createContext<ThemeContext>(\r\n    {} as ThemeContext\r\n);\r\n\r\nexport const ThemeProvider: React.FC = ({ children }) => {\r\n    const [theme, setTheme] = useState<Theme>(\"light\");\r\n    const toggleTheme = () => {\r\n        setTheme(theme === \"light\" ? \"dark\" : \"light\");\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\"\r\n\r\n\r\ntype FavoritesEntities = {\r\n    movie: number,\r\n    id: number\r\n}\r\n\r\nconst favoritesAdapter = createEntityAdapter<FavoritesEntities>()\r\n\r\nexport const favoritesSlice = createSlice({\r\n    name: \"favorites\",\r\n    initialState: favoritesAdapter.getInitialState(),\r\n    reducers: {\r\n        addFav: favoritesAdapter.addOne,\r\n        removeFav: favoritesAdapter.removeOne,\r\n        loadFavs: favoritesAdapter.setAll,\r\n        removeAllFavs: favoritesAdapter.removeAll\r\n    }\r\n})\r\n\r\nexport const {addFav, removeFav, loadFavs, removeAllFavs} = favoritesSlice.actions","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\"\r\n\r\ntype HistoryEntities = {\r\n    id: string;\r\n    query: string;\r\n}\r\n\r\nconst historyAdapter = createEntityAdapter<HistoryEntities>()\r\n\r\nexport const historySlice = createSlice({\r\n    name: \"history\",\r\n    initialState: historyAdapter.getInitialState(),\r\n    reducers: {\r\n        addNewHistory: historyAdapter.addOne,\r\n        loadHistory: historyAdapter.setAll,\r\n        removeAllHistory: historyAdapter.removeAll\r\n    }\r\n})\r\n\r\nexport const {addNewHistory, loadHistory, removeAllHistory} = historySlice.actions","import ClipLoader from 'react-spinners/ClipLoader';\r\n\r\ntype ThemeValue = {\r\n    theme: string;\r\n}\r\nconst MainLoader= (theme: ThemeValue) => {\r\n    const override = `\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 47.8%;\r\n        transform: translate(-50%, -47.8%);\r\n        @media(max-width: 600px) {\r\n            top: 50%;\r\n            left: 40%;\r\n            transform: translate(-50%, -47.8%);\r\n        }\r\n        @media(max-width: 300px) {\r\n            top: 50%;\r\n            left: 32%;\r\n            transform: translate(-50%, -47.8%);\r\n        }\r\n    `;\r\n\r\n    let color;\r\n    if (theme.theme === \"light\") {\r\n        color = \"#000000\";\r\n    } else {\r\n        color = \"#255555\";\r\n    }\r\n\r\n    return (\r\n        <ClipLoader color={color} loading={true} css={override} size={100} />\r\n    )\r\n}\r\nexport default MainLoader;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    id: 0,\r\n    email: \"\"\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState,\r\n    reducers: {\r\n        resetUser: (state) => {\r\n            return {\r\n                ...initialState\r\n            }\r\n        },\r\n        setUser: (_state, action) => {\r\n            return {\r\n                ...action.payload\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const {resetUser, setUser} = userSlice.actions\r\nexport default userSlice.reducer","import ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport { store, persistedStore } from './redux/store/store';\r\nimport { Provider } from 'react-redux';\r\nimport { ThemeProvider } from './context/ThemeProvider';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport React, { Suspense } from 'react';\r\nimport MainLoader from './components/MainLoader/MainLoader';\r\n\r\nconst App = React.lazy(() => import('./components/app'))\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistedStore}>\r\n        <ThemeProvider>\r\n          <Suspense fallback={<MainLoader theme=\"light\"/>}>\r\n            <App />\r\n          </Suspense>\r\n        </ThemeProvider>\r\n      </PersistGate>\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}